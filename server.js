//================================================ SERVER SETUP ================================================//

const express = require("express");
const app = express();
const db = require("./db.js");
const s3 = require("./s3.js");
const moment = require("moment");

app.use(express.static("./public"));
app.use(express.json());

// app.use((req, res, next) => {
//     console.log(req.method);
//     next();
// });

//================================================ MULTER SETUP ================================================//

const multer = require("multer");
const uidSafe = require("uid-safe");
const path = require("path");

const diskStorage = multer.diskStorage({
    // put files in the uploads directory
    destination: function (req, file, callback) {
        callback(null, __dirname + "/uploads");
    },
    // as the file name, use the unique id generated by the call to uidSafe with the extension of the original file name appended to it
    filename: function (req, file, callback) {
        uidSafe(24).then(function (uid) {
            callback(null, uid + path.extname(file.originalname));
        });
    },
});

const uploader = multer({
    storage: diskStorage,
    limits: {
        fileSize: 2097152,
    },
});

//================================================ ROUTES ================================================//

// The call to single indicates that we are   ↓↓↓↓   only expecting one single file to be uploaded
app.post("/upload", uploader.single("file"), s3.upload, function (req, res) {
    if (req.file) {
        // once we're successfully uploaded to the cloud, we want to
        // add a new image to the database!
        const { title, desc, username } = req.body;
        const url = `https://s3.amazonaws.com/spicedling/` + req.file.filename;

        db.addImage(url, username, title, desc)
            .then((image) => {
                image.rows[0].publDate = moment(
                    image.rows[0].created_at
                ).fromNow();
                // we want to send back the newly uploaded image object to our client side
                res.json(image.rows[0]);
            })
            .catch((err) => {
                console.log("err in addImage on POST /upload: ", err);
                return res.sendStatus(500);
            });
    } else {
        // boo hoo
        res.json({
            success: false,
        });
    }
});

app.get("/images.json", (req, res) => {
    db.getImages()
        .then((images) => {
            // format the date property to the "1 day ago" format via moment
            // and store it in the publDate property
            images.rows.forEach(
                (row) => (row.publDate = moment(row.date).fromNow())
            );
            res.json(images);
        })
        .catch((err) => {
            console.log("err in getImages() on GET /images.json", err);
            res.sendStatus(500);
        });
});

app.get("/selected-image/:id", (req, res) => {
    const { id } = req.params;

    console.log("making request: ", req.params);

    db.getImageById(id)
        .then((image) => {
            image.rows[0].publDate = moment(image.rows[0].date).fromNow();
            // we want to send back the newly uploaded image object to our client side
            res.json(image.rows[0]);
        })
        .catch((err) => {
            console.log("err in getImageById() on GET /selected-image/id", err);
            res.sendStatus(500);
        });
});

app.get("*", (req, res) => {
    res.sendFile(`${__dirname}/index.html`);
});

//================================================ PORT ================================================//

app.listen(8080, () => console.log(`I'm listening.`));
